package main;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.util.Scanner;
import java.util.StringTokenizer;

public class GraphExperiment {
    
    
        
        
    public static void main(String[] args) throws IOException  {
/**
     * Runs a series of experiments to measure the performance
     * of graph algorithms (DIJKSTRA)on different datasets generated by the graphgen class.
     * @throws IOException
     */

     //A 2D array with edges and vertices to be genarated
        int EV[][]=  {{10,20},{10,25},{10,30},{10,35},{10,40},{10,45},
                     {20,30},{20,70},{20,100},{20,130},{20,160},{20,190},
                    {30,72},{30,144},{30,216},{30,288},{30,360},{30,432},
                     {40,130},{40,260},{40,390},{40,520},{40,650},{40,780},
                     {50,204},{50,408},{50,612},{50,816},{50,1020},{50,1225},
                     {60,295},{60,590},{60,885},{60,1180},{60,1475},{60,1770},
                     {70,404},{70,806},{70,1209},{70,1612},{70,2016},{70,2415},
                    };
        
        //for loop to make text file named after the set of edges and vertices that it is procesing 
        for (int i = 0; i < EV.length; i++){

        Graphgen generator = new Graphgen(EV[i][0], 20, EV[i][1]);
        String source1=null;// a varaible to hold the soruce of the data
        try {
            generator.generateData("data/DATA1/data_"+EV[i][0]+"_"+EV[i][1]+".txt");
        } catch (IOException e) {
            System.out.println("Error writing to file: " + e.getMessage());
        }

        {
            Graph g = new Graph( );
            try
            {   	
                FileReader fin = new FileReader("data/DATA1/data_"+EV[i][0]+"_"+EV[i][1]+".txt");
                Scanner graphFile = new Scanner( fin );
    
                // Read the edges and insert
                String line;
                while( graphFile.hasNextLine( ) )
                {
                    line = graphFile.nextLine( );
                    StringTokenizer st = new StringTokenizer( line );
    
                    try
                    {
                        if( st.countTokens( ) != 3 )
                        {
                            System.err.println( "Skipping ill-formatted line " + line );
                            continue;
                        }
                        String source  = st.nextToken( );
                        source1=source;
                        String dest    = st.nextToken( );
                        int    cost    = Integer.parseInt( st.nextToken( ) );
                        g.addEdge( source, dest, cost );
                    }
                    catch( NumberFormatException e )
                      { System.err.println( "Skipping ill-formatted line " + line ); }
                 }
             }
             catch( IOException e )
               { System.err.println( e ); }
    
             System.out.println( "File read..." );
             System.out.println( g.vertexMap.size( ) + " vertices" );

             g.dijkstra(source1);// set the first vertice in the text file to be the source
             
            //System.out.println("number of pq ops"+ g.pq_count);
            //System.out.println("Number of edges "+g.V);
           // System.out.println("Number of edges "+g.E);
           // System.out.println("Number of vertix operations "+g.vCount);
           // System.out.println("Number of number of edge operation "+g.eCount);
           

            generator.Data( g.V,g.E, g.vCount, g.eCount,g.pq_count,(int)(g.E*(Math.log(g.V)/Math.log(2))),(g.vCount+ g.eCount+g.pq_count));
      // above line adds the necessry data needed to the final DATA file
            
}
        }
             

    
            // Scanner in = new Scanner( System.in );
             
        }
    

    private static void println(String string) {
    }
}
